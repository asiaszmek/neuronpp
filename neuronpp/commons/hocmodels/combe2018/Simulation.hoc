
back=0

//////// load needed templates////////////
if(!back){ load_file("nrngui.hoc")               }
if(!back){ load_file("template/ObliquePath.hoc") }
if(!back){ load_file("template/BasalPath.hoc"  ) }
load_file("../template/load_templates.hoc")
objref econ,f1,f2,f3,ss,cvode
f1= new File()
f2= new File()
f3= new File()
ss=new SaveState()
cvode = new CVode(1)
x=cvode.active(1)

restart=0
v_init=-70

strdef morphology_location, morpho_path, ObliqueTrunkSection, BasalTrunkSection
objref vRP, vAPEX

proc xopen_morphology(){
	sprint(morpho_path,"%s/%s",morphology_location,$s1)
	xopen(morpho_path)
}

// Carmen
morphology_location = "pc2b"
ObliqueTrunkSection = "trunk[17]"
BasalTrunkSection   = "trunk[7]"

xopen_morphology("cell.hoc")				//reads morpholofy from the file
xopen_morphology("cell-analysis-simple.hoc") //reads simplified version of CA 


			// --------------- Creating lists-----------------

xopen("lib/TP-lib.hoc")
Tip_sections(apical_non_trunk_list,apical_trunk_list,"Apical")		
objref apical_tip_list
apical_tip_list=TP_list							// Apical Tip list

print "apical_tip_list"
apical_tip_list.printnames()
print  "END apical_tip_list"

objref tmp_pl[num_tips],pl[num_tips],opl[num_tips],degree_apical_tip,peri_trunk_list
objref bl[num_tips],obl[num_tips],degree_basal_tip
xopen("lib/Oblique-lib.hoc")
oblique_sections(apical_tip_list,apical_trunk_list,num_tips)		// apical dendrite path lists and degree of tips

xopen("lib/vector-distance.hoc")

//-----------------------------------------------------------------------------------------------------
printf("Setting up cell\n")                                         // load cell-setup to
xopen("cell-setup.hoc")                                             // specify all mechanisms, membrane properties etc


///////////////////Load File//////////////////////


load_file("sessio.ses")

//////   Spike counter//////////


cvode_active(1)

//////   Spike counter//////////

objref apc, v1

proc insert_APC() {
apc = new APCount(0.5)
apc.thresh = $1
v1 = new Vector()
apc.record(v1)
}

//////    IClamp    ///////
objectvar clamp
proc insert_IClamp() {
     clamp = new IClamp(0.5)
     clamp.del = $3
     clamp.dur = $1
     clamp.amp = $2
}



            
////////////////////Main///////////////////


proc main(){

  del=100
  tstop=1000+del+200
  tstopI=1000
  
  in=0
  
  th=-20
  access soma
  insert_APC(th)
  
  for u= in,15{

 
current=u*0.1
access soma
insert_IClamp(tstopI,current,del)

//////////////run//////////////////////// 
 finitialize(v_init)
 fcurrent()
 run()
/////////////////////////////////////
 
  // print the spike number 
  printf("\n Current: %.2f nA | # Spikes: %d\n", current,  apc.n)
  printf("___________________\n")
   
}   // for u

}

main()
/********    end file    ******/

